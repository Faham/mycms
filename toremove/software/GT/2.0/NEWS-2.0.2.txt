GT NEWS

=== GT 2.0.2 ===

This release is primarily a respin of the GT 2.0.1 as I seem to
have messed up the packaging of 2.0.1.

1 bug has been fixed since GT 2.0.1:

  * GT attempts to be safely re-entrant, particularly to cope with
    being stopped or disposed from within GT event handlers.

=== GT 2.0.1 ===

Some bugs have been fixed since GT 2.0:

  * Server.UpdateAcceptors() threw an NullRefEx as it wasn't properly
    handling case where an acceptor was inactive but the first to 
    be removed.

  * Add lock() around FlushChannelMessages (called by IStream.Flush())
    <https://papyrus.usask.ca/trac/gt/ticket/66>.

  * ClientRepeater configuration should use TickInterval, not 
    PingInterval!  <https://papyrus.usask.ca/trac/gt/ticket/64>

  * Allow Server instances to be stopped and restarted by not nilling
    clientIDs in KillAll()  <https://papyrus.usask.ca/trac/gt/ticket/60>

  * Wrap TcpTransport.ToString() to avoid throwing exceptions on invalid handles.

  * Ensure Server and Client are started at the end of
    StartSeparateListeningThread() <https://papyrus.usask.ca/trac/gt/ticket/56>

  * Client.Get*Stream(): check that streams are still active
    <https://papyrus.usask.ca/trac/gt/ticket/71>

  * Exposed an IStream's connexion through a Connexion property

  * UdpAccept and TcpAcceptor should now properly trap and report
    exceptions <https://papyrus.usask.ca/trac/gt/ticket/55>

  * GT should be a bit more quiet

  * Streamed tuples now properly flush.

  * ClientRepeater now updates newly connected clients with the
    other currently-active clients
    <https://papyrus.usask.ca/trac/gt/ticket/79>


=== GT 2.0 ===

GT 2.0 has undergone a significant re-architecturing from GT 1.0
to promote more flexibility and extensibility.  There have been a
number of breaking changes, primarily dealing with type renaming.


Breaking Changes:

  * As part of reorganizing the code, we've renamed the namespaces
    (GTServer and GTClient -> GT.Net) and introduced a new assembly to
    hold common components (GTBase). 
    <https://papyrus.usask.ca/trac/gt/ticket/7>

      * Change all the uses
	  'using GTServer;'  ->  'using GT.Net;'
	  'using GTClient;'  ->  'using GT.Net;'

      * You will need to add the GTBase project or DLL to your clients.
	<https://papyrus.usask.ca/trac/gt/ticket/13>

  * The TCP and UDP protocols have been separated out and generalized
    from the code into implementations called transports (see ITransport).
    The MessageProtocol enum has disappeared: clients now request 
    a communication protocol by describing the requirements for
    sending a message; GT will use these requirements to find a suitable
    transport.

  * Many classes have been shielded by interfaces, notably the *Stream
    classes provided by GT Client.  The Client.Get*Stream() methods now
    return interfaces (i.e., IStringStream, IBinaryStream, IObjectStream,
    ISessionStream, ITupleStream*).  The Client.GetStreamedTuple*()
    methods now also return interfaces (i.e., IStreamedTuple).

  * GT Server's Server.Client has been renamed to ClientConnexion,
    and similarly GT Client's ServerStream has been renamed to
    ServerConnexion.  These classes have been shielded behind an
    interface IConnexion.  Both classes have undergone cleanup:

      * the Dead property has been flipped to be called Active and
        made read-only;

      * IConnexion now implements IDisposable: any uses of Dead as
        a writable property should be changed to use IDisposable.Dispose().

      * the Send() calls now take both a MessageDeliverRequirements object
        and a ChannelDeliveryRequirements object (one of which can be
	null).  These objects encompass the different MessageAggregation,
	MessageOrder, and MessageProtocol values used previously.

  * Previously-exposed fields have been made into properties and
    some have been renamed to better conform to C#/.NET naming guidelines. 
    Most notable perhaps is Server.clientList -> Server.Clients.

  * AggregatingSharedDictionary and SimpleSharedDictionary have been
    have been changed to use IObjectStreams rather than a IBinaryStream.
    NOTE: AggregatingSharedDictionary is likely to disappear.

  * Some delegates have had their signatures changed to use the least
    specific collection classes possible
	ClientsRemovedHandler uses ICollection
	ClientsJoinedHandler uses ICollection

  * The marshalling code has been separated and servers and clients
    now deal in more abstract Messages.
    <https://papyrus.usask.ca/trac/gt/ticket/23>

      * delegate MessageHandler has a different calling convention

  * The message parameterization for Quality of Service has been
    reworked.  Many of the parameters previously specified on Send()
    are now properties associated on the channels.

  * Specialized GT exceptions have been created to represent different
    insurpassable communications conditions in GT.  These exceptions
    inherit from GTException.

      CannotConnectToRemoteException: a client experienced some problem
	connecting to a specified server.  It may be that there was
	a mistake in the identifying information for the server,
	the server may be down or unavailable, or there are routing
	difficulties (such as firewalls) that prevent connecting.
	Potentially thrown on Client.Start().  This exception may
	also be thrown on Send() for short-lived transports where
	connections are opened periodically rather that being
	long-lived (e.g., HTTP and SMTP),

      NoMatchingTransport: no transport could be found that supported
        the required QoS specifications.  Potentially thrown by the
	various flavours of Send().

  * Error reporting has changed somewhat dramatically.  The old
    ErrorEventHandler delegates are now a delegate named ErrorEventNofication:

	public delegate void ErrorEventNotication(ErrorSummary summary);

    The ErrorSummary object contains an assessment of the severity
    of the error, an actionable descriptive error code, and
    debugging information.

  * Client.StartListeningOnSeperateThread(int) has been renamed to
    Client.StartSeparateListeningThread() to be consistent with
    Server.  Both Client and Server's StartSeparateListeningThread()
    have had their tick-interval argument removed in favour of being
    specified using the configuration's TickInterval property.


New additions

  * Added a lifecycle protocol, IStartable, consisting of Start(),
    Stop(), and Dispose() methods, and a read-only property Active. 
    These methods have been added to most GT user-visible objects
    to respectively start, stop, and dispose of any system object. 
    <https://papyrus.usask.ca/trac/gt/ticket/22>
    
      * Client.StartListening() and Server.StartListening() both
        automatically Start() and Stop() their respective instances.
	This ensures that the clients and servers are closed in
	their normal usage.

      * Client.Update() and Server.Update() will automagically
	call Start() if their instance has not already been started.
	This behaviour is deprecated and will be removed in a future
	release.

  * Added Client.Sleep() and Server.Sleep() methods: these new methods
    provide a much more efficient way for servicing incoming messages
    while sleeping and greatly improve the fairness of servicing
    GT requests.

  * We have also introduced some new components in the GT.Utils and GT.UI
    namespaces.  The intent is to provide components that are helpful
    for quickly prototyping groupware apps.

  * We have added some handy events to notify of interesting situations:
      * notification of messages sent on server instances
      * notification of the addition and removal of connexions to
        client or server instances
      * notification of the addition and removal of transports from
        connexions. 
      * notification of ping-sent and ping-received on connexions for
        particular transports.

  * Began creating unit tests using NUnit <http://nunit.org>

Re-organized source code

  * Separated example programs from the core client and server
    components <https://papyrus.usask.ca/trac/gt/ticket/10>


